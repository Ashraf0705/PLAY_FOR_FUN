// frontend/src/services/apiService.js
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5001/api';

// Create an Axios instance with default settings
const axiosInstance = axios.create({
    baseURL: API_URL,
    withCredentials: true, // Crucial for sending HttpOnly cookies cross-origin
});

/**
 * User joins an existing Space. Now includes password.
 * @param {string} joinCode
 * @param {string} username
 * @param {string} password
 * @param {string} confirmPassword
 * @returns {Promise<object>}
 */
export const joinSpace = async (joinCode, username, password, confirmPassword) => {
  try {
    const response = await axiosInstance.post(`/spaces/join`, {
      join_code: joinCode,
      username: username,
      password: password,
      confirm_password: confirmPassword
    });
    return response.data;
  } catch (error) {
    console.error("Error in joinSpace API call:", error.response?.data || error.message);
    throw error.response?.data || { message: 'An unexpected error occurred while joining the space.' };
  }
};

/**
 * Admin creates a new Space. Join code is generated by the backend.
 */
export const createSpace = async (spaceName, adminPassword, confirmPassword) => {
  try {
    const response = await axiosInstance.post(`/spaces/create`, {
      space_name: spaceName,
      admin_password: adminPassword,
      confirm_password: confirmPassword,
    });
    return response.data;
  } catch (error) {
    console.error("Error in createSpace API call:", error.response?.data || error.message);
    throw error.response?.data || { message: 'An unexpected error occurred while creating the space.' };
  }
};

/**
 * Admin logs into an existing Space.
 */
export const adminLoginToSpace = async (joinCode, adminPassword) => {
  try {
    const response = await axiosInstance.post(`/spaces/admin/login`, {
      join_code: joinCode,
      admin_password: adminPassword,
    });
    return response.data;
  } catch (error) {
    console.error("Error in adminLoginToSpace API call:", error.response?.data || error.message);
    throw error.response?.data || { message: 'An unexpected error occurred during admin login.' };
  }
};

/**
 * User logs into an existing Space. Now includes password.
 * @param {string} joinCode
 * @param {string} username
 * @param {string} password
 * @returns {Promise<object>}
 */
export const userLoginToSpace = async (joinCode, username, password) => {
  try {
    const response = await axiosInstance.post(`/spaces/user/login`, {
      join_code: joinCode,
      username: username,
      password: password,
    });
    return response.data;
  } catch (error) {
    console.error("Error in userLoginToSpace API call:", error.response?.data || error.message);
    throw error.response?.data || { message: 'An unexpected error occurred during user login.' };
  }
};

/**
 * Fetches all matches for the user's currently authenticated space. (User facing)
 */
export const getMatches = async () => {
  try {
    const response = await axiosInstance.get(`/matches`);
    return response.data;
  } catch (error) {
    console.error("Error fetching matches:", error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch matches.' };
  }
};

/**
 * Fetches details for a single match by its ID. (User facing)
 */
export const getMatchDetailsById = async (matchId) => {
  try {
    const response = await axiosInstance.get(`/matches/${matchId}`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching details for match ${matchId}:`, error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch match details.' };
  }
};

/**
 * Fetches the prediction summary for a specific match. (User facing)
 */
export const getPredictionSummary = async (matchId) => {
  try {
    const response = await axiosInstance.get(`/predictions/${matchId}/summary`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching prediction summary for match ${matchId}:`, error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch prediction summary.' };
  }
};

/**
 * Submits or updates a user's prediction for a specific match.
 */
export const submitPrediction = async (matchId, predictedWinner) => {
  try {
    const response = await axiosInstance.post(`/predictions/${matchId}/predict`, {
      predicted_winner: predictedWinner,
    });
    return response.data;
  } catch (error) {
    console.error(`Error submitting prediction for match ${matchId}:`, error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not submit prediction.' };
  }
};

/**
 * Gets the current user's prediction for a specific match.
 */
export const getMyPrediction = async (matchId) => {
  try {
    const response = await axiosInstance.get(`/predictions/${matchId}/my-prediction`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching my prediction for match ${matchId}:`, error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch your prediction.' };
  }
};

/**
 * Logs out the current user/admin.
 */
export const logoutUserApi = async () => {
    try {
        const response = await axiosInstance.post(`/spaces/logout`);
        return response.data;
    } catch (error) {
        console.error("Error in logoutUserApi call:", error.response?.data || error.message);
        throw error.response?.data || { message: 'An unexpected error occurred during logout.' };
    }
};

/**
 * Fetches the weekly leaderboard for the user's currently authenticated space.
 */
export const getWeeklyLeaderboard = async () => {
  try {
    const response = await axiosInstance.get(`/leaderboards/weekly`);
    return response.data;
  } catch (error) {
    console.error("Error fetching weekly leaderboard:", error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch weekly leaderboard.' };
  }
};

/**
 * Fetches the overall leaderboard for the user's currently authenticated space.
 */
export const getOverallLeaderboard = async () => {
  try {
    const response = await axiosInstance.get(`/leaderboards/overall`);
    return response.data;
  } catch (error) {
    console.error("Error fetching overall leaderboard:", error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch overall leaderboard.' };
  }
};


// --- ADMIN Functions ---
// Admin Match Management
export const getAllMatchesForAdmin = async () => {
  try {
    const response = await axiosInstance.get(`/matches/admin/all`);
    return response.data;
  } catch (error) {
    console.error("Error fetching matches for admin:", error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not fetch matches for admin.' };
  }
};

export const addMatchByAdmin = async (matchData) => {
  try {
    const response = await axiosInstance.post(`/matches/admin/add`, matchData);
    return response.data;
  } catch (error) {
    console.error("Error adding match by admin:", error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not add match.' };
  }
};

export const updateMatchByAdmin = async (matchId, matchData) => {
  try {
    const response = await axiosInstance.put(`/matches/admin/${matchId}/edit`, matchData);
    return response.data;
  } catch (error) {
    console.error(`Error updating match ${matchId} by admin:`, error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not update match.' };
  }
};

export const deleteMatchByAdmin = async (matchId) => {
  try {
    const response = await axiosInstance.delete(`/matches/admin/${matchId}/delete`);
    return response.data;
  } catch (error) {
    console.error(`Error deleting match ${matchId} by admin:`, error.response?.data || error.message);
    throw error.response?.data || { message: 'Could not delete match.' };
  }
};

export const enterMatchResultByAdmin = async (matchId, resultData) => {
    try {
        const response = await axiosInstance.put(`/matches/admin/${matchId}/result`, resultData);
        return response.data;
    } catch (error) {
        console.error(`Error entering result for match ${matchId}:`, error.response?.data || error.message);
        throw error.response?.data || { message: 'Could not enter match result.' };
    }
};

export const clearMatchResultByAdmin = async (matchId) => {
    try {
        const response = await axiosInstance.post(`/matches/admin/${matchId}/clear-result`);
        return response.data;
    } catch (error) {
        console.error(`Error clearing result for match ${matchId}:`, error.response?.data || error.message);
        throw error.response?.data || { message: 'Could not clear match result.' };
    }
};

// Admin User Score Management
export const setOverallScoreByAdmin = async (userIdToEdit, newScore) => {
    try {
        const response = await axiosInstance.put(`/admin/users/${userIdToEdit}/score`, { newScore: parseInt(newScore, 10) });
        return response.data;
    } catch (error) {
        console.error(`Error setting score for user ${userIdToEdit}:`, error.response?.data || error.message);
        throw error.response?.data || { message: 'Could not set user score.' };
    }
};